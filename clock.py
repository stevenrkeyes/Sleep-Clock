# use Tkinter to show a digital clock# this draws from code from a clock by vegaseat 10 Sep 2006# modified in python 3 by Steven Keyes 14 Feb 2012# added Tkinder windows and such, as well as unique clock functionalityfrom tkinter import *from tkinter import ttkimport time# steven standard time goes like this:# starts when he wakes up, like 11:00# increases through his day, like 15:00# continues through his night, like 25:30# resets when he sleeps (or wakes up, doesn't matter so much)# variable toggling extended time or not for srkeyes standard timefullTime = False# when fullTime is on, it's the sst from the previous day:# it's not Monday at 1:30AM, it's Sunday at 25:30# so, fullTime turns on at midnight and is off whenever I sleep# global variable that tells if i'm sleeping# (santa claus variable)sleeping = False# this is important because fullTime stays False if I'm sleeping# global for all nighters, like 48:30extendedFullTime = False# this isn't actually implemented# don't do this or you die.#extendedExtendedFullTime = False# and, really, it should be implemented with an integer# for how many days i haven't slept# but I think being human sets an upper bound on# the max value of this integerdef toggleFullTime():    # function for switching fullTime on and off    global fullTime    fullTime = not fullTimedef startSleep():    # this function will record a sleep start time as well as toggle FullTime    print("zzz")    global sleeping    global fullTime    sleeping = True    fullTime = Falsedef stopSleep():    # toggle sleeping to allow fullTime to become True at midnight    # this function will record a sleep stop time     global sleeping    sleeping = Falsedef isItMidnight():    # returns True if it's currently the first second of midnight    return (time.localtime().tm_hour==0 and            time.localtime().tm_min==0 and            time.localtime().tm_sec==0)# initialize a time variable for the clock parttime1 = ''# class for the Clock frame# contains functions for starting and running clock elementsclass ClockApp(Frame):    global fullTime    def __init__(self, master):        Frame.__init__(self, master, bg="black")        self.pack()        self.createWidgets() #defined below        #self["bg"] = "black"    def clickAtSleep(self):        # actions performed by the sleep button before sleeping        # preps the sleep button for waking up        startSleep()        self.sleepButton["text"] = "Waking up"        self.sleepButton["command"] = self.clickAtWake    def clickAtWake(self):        # actions performed by the sleep button when waking up        # preps the sleep button for sleeping        stopSleep()        self.sleepButton["text"] = "Going to sleep"        self.sleepButton["command"] = self.clickAtSleep        #do i need to repack the button?            def createWidgets(self):        # creates and packs everything                global fullTime        self.overrideButton = Button(self)                self.overrideButton["text"] = "Override Time Toggle"        self.overrideButton["command"] = toggleFullTime        self.overrideButton["width"] = 15        self.overrideButton.pack({"side": "bottom"})                self.sleepButton = Button(self)        self.sleepButton["text"] = "Going to sleep"        self.sleepButton["command"] = self.clickAtSleep        self.sleepButton["width"] = 15        self.sleepButton.pack({"side": "bottom"})        self.QUIT = Button(self)        self.QUIT["text"] = "Close Clock"        self.QUIT["command"] =  self.quit        self.QUIT["width"] = 15        self.QUIT.pack({"side": "bottom"})        # make a label for the clock        self.clockDisplay = Label(self)        self.clockDisplay["bg"] = "black"        self.clockDisplay["padx"] = 50        self.clockDisplay["pady"] = 250        self.clockDisplay["fg"] = "purple"        self.clockDisplay["text"] = "HH:MM:SS"        self.clockDisplay["font"]=('Digital-7', 200)        self.clockDisplay["anchor"]="center"        self.clockDisplay.pack({"side": "top"}    def tick(self):        global time1        global fullTime        global sleeping        if (isItMidnight() and not sleeping):            fullTime = True        if fullTime:            time2 = str(time.localtime().tm_hour + 24) + time.strftime(":%M:%S")        else:            time2 = time.strftime("%H:%M:%S")        # if time string has changed, update it        if time2 != time1:            time1 = time2            self.clockDisplay.config(text=time2)        # calls itself every 200 milliseconds        # to update the time display as needed        # could use >200 ms, but display gets jerky        self.clockDisplay.after(200, self.tick)# bg = "black"# make the root window elementroot = Tk()root["bg"] = "black"root.title("Steven's Personal Clock")# syntax: root.geometry('AxB-C+D')# A is width, B height, C distance from right side of screen, D distance from top of screenroot.geometry('1280x1024')app = ClockApp(root)# start a function that ticks the clock and updates elements in the frame# and then recusively calls itself again every secondapp.tick()# start a process that runs the windowapp.mainloop()# burn the world when the window ends (is closed)root.destroy()